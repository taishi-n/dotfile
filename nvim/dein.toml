[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'dkarter/bullets.vim'
hook_add = '''
   let g:bullets_enabled_file_types = [
       \ 'markdown',
       \ 'text',
       \ 'gitcommit',
       \ 'scratch'
       \]
'''

[[plugins]]
repo = 'fatih/vim-go'

[[plugins]]
repo = 'godlygeek/tabular'

[[plugins]]
repo = 'majutsushi/tagbar'

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
   let g:vim_markdown_conceal = 0
   let g:vim_markdown_folding_disabled = 1
   let g:vim_markdown_new_list_item_indent = 2
   let g:vim_markdown_auto_insert_bullets = 1
   let g:vim_markdown_new_list_item_indent = 1
   let g:vim_markdown_emphasis_multiline = 0
'''
on_ft = ['md','markdown','mkd']

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'ambv/black'

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'cohama/lexima.vim'
hook_add = '''
   " TODO: dein_lazy.toml へ移動
   " REF: https://github.com/monaqa/dotfiles/blob/master/.config/nvim/plugins/rc/dein_lazy.toml
   let g:lexima_enable_endwise_rules = 1
   call lexima#add_rule({'char': '$', 'input_after': '$', 'filetype': 'tex'})
   call lexima#add_rule({'char': '$', 'at': '%#$', 'leave': 1, 'filetype': 'tex'})
   call lexima#add_rule({'char': '', 'at': '$%#$', 'delete': 1, 'filetype': 'tex'})

   " to avoid the confliction of deoplete
   " let g:lexima_no_default_rules = 1
   " call lexima#set_default_rules()
   imap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"
'''

[[plugins]]
repo = 'mattn/emmet-vim'
hook_add = '''
   let g:user_emmet_settings = { 'lang' : 'ja' }
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
   let g:gitgutter_sign_added = '+ '
   let g:gitgutter_sign_modified = '++'
   let g:gitgutter_sign_removed = '- '
   let g:gitgutter_sign_removed_first_line = '^^'
   let g:gitgutter_sign_modified_removed = 'ww'
   let g:gitgutter_override_sign_column_highlight = 0

   highlight clear SignColumn
   highlight GitGutterAdd ctermfg=2
   highlight GitGutterChange ctermfg=3
   highlight GitGutterDelete ctermfg=1
   highlight GitGutterChangeDelete ctermfg=4

   set updatetime=1000

   nnoremap [gitgutter] <Nop>
   nmap <C-h> [gitgutter]
   nmap [gitgutter]j <Plug>GitGutterNextHunk
   nmap [gitgutter]k <Plug>GitGutterPrevHunk
   nmap [gitgutter]u <Plug>GitGutterUndoHunk
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
   nmap [fugitive] <Nop>
   map <Leader>g [fugitive]
   nmap <silent> [fugitive]s :<C-u>Gstatus<CR>
   nmap <silent> [fugitive]d :<C-u>Gdiff<CR>
   nmap <silent> [fugitive]b :<C-u>Gblame<CR>
   nmap <silent> [fugitive]l :<C-u>Glog<CR>
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''
   let g:tex_flavor = "latex"
   let g:vimtex_compiler_latexmk_engines = { '_' : '-pdfdvi' }
   let g:latex_latexmk_enabled = 1
   let g:vimtex_view_general_viewer
         \ = '/Applications/Preview.app/Contents/MacOS/Preview'
   let g:vimtex_view_general_options = '-ga'
   let g:latex_latexmk_options = '-pdfdvi -latex=uplatex -synctex=1 -halt-on-error'
   let g:latex_view_method = 'general'
   let g:latex_view_general_viewer = 'open'
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
   " Ctrl + kで次の指摘へ、Ctrl + jで前の指摘へ移動
   nmap <silent> <C-k> <Plug>(ale_previous_wrap)
   nmap <silent> <C-j> <Plug>(ale_next_wrap)

   " Lint only file saved
   let g:ale_lint_on_text_changed = 0
   let g:ale_linters = {
      \ 'cpp': ['gcc'],
      \ 'python': ['black'],
      \ 'tex': ['alex', 'chktex'],
      \ }
   let g:ale_fixers = {
      \ 'python': ['black'],
      \ 'tex': ['chktex'],
      \ }

   " モードの表示名を定義(デフォルトだと長くて横幅を圧迫するので略称にしている)
   highlight link ALEErrorSign Tag
   highlight link ALEWarningSign StorageClass

   let g:ale_sign_error = '✘'
   let g:ale_sign_warning = '⚠'
   let g:ale_echo_msg_format = '[%linter%]%code: %%s'
'''

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
   let g:indentLine_setConceal = 0
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
   source ~/.config/nvim/coc-settings.vim
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
   function! CocCurrentFunction()
       return get(b:, 'coc_current_function', '')
   endfunction

    let g:lightline = {
    \ 'colorscheme': 'deus',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \ },
    \ 'component_function': {
    \   'cocstatus': 'coc#status',
    \   'currentfunction': 'CocCurrentFunction'
    \ },
    \ }
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
   let g:lightline.component_expand = {
         \  'linter_checking': 'lightline#ale#checking',
         \  'linter_warnings': 'lightline#ale#warnings',
         \  'linter_errors': 'lightline#ale#errors',
         \  'linter_ok': 'lightline#ale#ok',
         \ }
   let g:lightline.component_type = {
         \     'linter_checking': 'left',
         \     'linter_warnings': 'warning',
         \     'linter_errors': 'error',
         \     'linter_ok': 'left',
         \ }
'''
