[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'dkarter/bullets.vim'
hook_add = '''
   let g:bullets_enabled_file_types = [
       \ 'markdown',
       \ 'text',
       \ 'gitcommit',
       \]
   let g:bullets_checkbox_markers = ' x'
   let g:bullets_outline_levels = []
'''

[[plugins]]
repo = 'plasticboy/vim-markdown'
hook_add = '''
   let g:vim_markdown_conceal = 0
   let g:vim_markdown_folding_disabled = 1
   let g:vim_markdown_new_list_item_indent = 3
   let g:vim_markdown_auto_insert_bullets = 0
   let g:vim_markdown_emphasis_multiline = 0
'''
on_ft = ['md','markdown']

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'averms/black-nvim'
on_ft = ['python']

[[plugins]]
repo = 'tpope/vim-commentary'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'tpope/vim-repeat'
on_idle = 1

[[plugins]]
repo = 'tpope/vim-speeddating'

[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
   let g:gitgutter_sign_added = '+ '
   let g:gitgutter_sign_modified = '++'
   let g:gitgutter_sign_removed = '- '
   let g:gitgutter_sign_removed_first_line = '^^'
   let g:gitgutter_sign_modified_removed = 'ww'
   let g:gitgutter_override_sign_column_highlight = 0

   highlight clear SignColumn
   highlight GitGutterAdd ctermfg=2
   highlight GitGutterChange ctermfg=3
   highlight GitGutterDelete ctermfg=1
   highlight GitGutterChangeDelete ctermfg=4

   set updatetime=1000

   nnoremap [gitgutter] <Nop>
   nmap <C-h> [gitgutter]
   nmap [gitgutter]j <Plug>GitGutterNextHunk
   nmap [gitgutter]k <Plug>GitGutterPrevHunk
   nmap [gitgutter]u <Plug>GitGutterUndoHunk
'''

[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
   nmap [fugitive] <Nop>
   map <Leader>g [fugitive]
   nmap <silent> [fugitive]s :<C-u>Gstatus<CR>
   nmap <silent> [fugitive]d :<C-u>Gdiff<CR>
   nmap <silent> [fugitive]b :<C-u>Gblame<CR>
   nmap <silent> [fugitive]l :<C-u>Glog<CR>
'''

[[plugins]]
repo = 'lervag/vimtex'
on_ft = ['tex']
hook_add = '''
   let g:tex_flavor = "latex"
   let g:vimtex_compiler_latexmk_engines = { '_' : '-pdfdvi' }
   let g:latex_latexmk_enabled = 1
   let g:vimtex_view_general_viewer
         \ = '/Applications/Preview.app/Contents/MacOS/Preview'
   let g:vimtex_view_general_options = '-ga'
   let g:latex_latexmk_options = '-pdfdvi -latex=uplatex -synctex=1 -halt-on-error'
   let g:latex_view_method = 'general'
   let g:latex_view_general_viewer = 'open'
'''

[[plugins]]
repo = 'neoclide/coc.nvim'
rev = 'release'
on_i = 1
merged = '0'
hook_add = '''
   command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')
   source ~/.config/nvim/coc-settings.vim
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
   function! CocCurrentFunction()
       return get(b:, 'coc_current_function', '')
   endfunction

    let g:lightline = {
    \ 'colorscheme': 'deus',
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ],
    \             [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ],
    \ },
    \ 'component_function': {
    \   'cocstatus': 'coc#status',
    \   'currentfunction': 'CocCurrentFunction'
    \ },
    \ }
'''

[[plugins]]
repo = 'maximbaz/lightline-ale'
depends = ['lightline.vim', 'ale']
hook_add = '''
   let g:lightline.component_expand = {
         \  'linter_checking': 'lightline#ale#checking',
         \  'linter_warnings': 'lightline#ale#warnings',
         \  'linter_errors': 'lightline#ale#errors',
         \  'linter_ok': 'lightline#ale#ok',
         \ }
   let g:lightline.component_type = {
         \     'linter_checking': 'left',
         \     'linter_warnings': 'warning',
         \     'linter_errors': 'error',
         \     'linter_ok': 'left',
         \ }
'''

[[plugins]]
repo = 'khaveesh/vim-fish-syntax'
